// <auto-generated />
using System;
using Diploma_Ishchenko.DatabaseData.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Diploma_Ishchenko.Migrations
{
    [DbContext(typeof(PlanItContext))]
    partial class PlanItContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Colortheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("colorthemes_pkey");

                    b.ToTable("colorthemes", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.GiftCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("balance");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("card_number");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("card_type");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("gift_cards_pkey");

                    b.HasIndex(new[] { "CardNumber" }, "gift_cards_card_number_key")
                        .IsUnique();

                    b.ToTable("gift_cards", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("integer")
                        .HasColumnName("admin_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("creator_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("InviteCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("invite_code");

                    b.Property<bool?>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_completed");

                    b.Property<bool?>("IsGroupGoal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_group_goal");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("goals_pkey");

                    b.HasIndex("AdminId");

                    b.HasIndex("CreatorId");

                    b.HasIndex(new[] { "InviteCode" }, "goals_invite_code_key")
                        .IsUnique();

                    b.ToTable("goals", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.GroupChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("GoalId")
                        .HasColumnType("integer")
                        .HasColumnName("goal_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("group_chat_pkey");

                    b.HasIndex("GoalId");

                    b.HasIndex("UserId");

                    b.ToTable("group_chat", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GoalId")
                        .HasColumnType("integer")
                        .HasColumnName("goal_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("group_members_pkey");

                    b.HasIndex("GoalId");

                    b.HasIndex("UserId");

                    b.ToTable("group_members", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.GroupTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("GoalId")
                        .HasColumnType("integer")
                        .HasColumnName("goal_id");

                    b.Property<bool?>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_completed");

                    b.Property<int?>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("priority");

                    b.Property<string>("Section")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("section");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("group_tasks_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GoalId");

                    b.ToTable("group_tasks", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("integer")
                        .HasColumnName("admin_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("news_pkey");

                    b.HasIndex("AdminId");

                    b.ToTable("news", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.NewsImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_path");

                    b.Property<int?>("NewsId")
                        .HasColumnType("integer")
                        .HasColumnName("news_id");

                    b.HasKey("Id")
                        .HasName("news_images_pkey");

                    b.HasIndex("NewsId");

                    b.ToTable("news_images", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.PersonalTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("GoalId")
                        .HasColumnType("integer")
                        .HasColumnName("goal_id");

                    b.Property<bool?>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_completed");

                    b.Property<int?>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ProbableCompleteDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("probablecompletedate");

                    b.Property<string>("Section")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("section");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("personal_tasks_pkey");

                    b.HasIndex("GoalId");

                    b.HasIndex("UserId");

                    b.ToTable("personal_tasks", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Point", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("amount");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId")
                        .HasName("points_pkey");

                    b.ToTable("points", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.PointsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reason");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("points_history_pkey");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("points_history", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("posts_pkey");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.PostComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("PostId")
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    //b.Property<DateTime?>("UpdatedAt")
                    //    .HasColumnType("timestamp without time zone")
                    //    .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("post_comments", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.PostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_path");

                    b.Property<int?>("PostId")
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("post_images_pkey");

                    b.HasIndex("PostId");

                    b.ToTable("post_images", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("role_pkey");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Scoretransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Sourcetype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sourcetype");

                    b.Property<string>("Transactiontype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("transactiontype");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("scoretransactions_pkey");

                    b.HasIndex("Userid");

                    b.ToTable("scoretransactions", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("SubscribedToId")
                        .HasColumnType("integer")
                        .HasColumnName("subscribed_to_id");

                    b.Property<int?>("SubscriberId")
                        .HasColumnType("integer")
                        .HasColumnName("subscriber_id");

                    b.HasKey("Id")
                        .HasName("subscriptions_pkey");

                    b.HasIndex("SubscribedToId");

                    b.HasIndex(new[] { "SubscriberId", "SubscribedToId" }, "subscriptions_subscriber_id_subscribed_to_id_key")
                        .IsUnique();

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.SubscriptionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("PaymentAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("payment_amount");

                    b.Property<DateTime>("SubscriptionEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("subscription_end_date");

                    b.Property<DateTime>("SubscriptionStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("subscription_start_date");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("subscription_history_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("subscription_history", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.TaskExecutionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("execution_date");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<string>("TaskType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("task_type");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("task_execution_history_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("task_execution_history", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("text")
                        .HasColumnName("biography");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("google_id");

                    b.Property<bool?>("HasActiveSubscription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("has_active_subscription");

                    b.Property<bool?>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nickname");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<int?>("Roleid")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.Property<DateTime?>("SubscriptionEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("subscription_end_date");

                    b.Property<DateTime?>("SubscriptionStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("subscription_start_date");

                    b.Property<string>("TelegramId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("telegram_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.Property<string>("Userphoto")
                        .HasColumnType("text")
                        .HasColumnName("userphoto");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex("Roleid");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Nickname" }, "users_nickname_key")
                        .IsUnique();

                    b.HasIndex(new[] { "TelegramId" }, "users_telegram_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "users_username_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.UserGiftCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GiftCardId")
                        .HasColumnType("integer")
                        .HasColumnName("gift_card_id");

                    b.Property<bool?>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_used");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("used_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_gift_cards_pkey");

                    b.HasIndex("GiftCardId");

                    b.HasIndex("UserId");

                    b.ToTable("user_gift_cards", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Usersetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Colorthemeid")
                        .HasColumnType("integer")
                        .HasColumnName("colorthemeid");

                    b.Property<bool?>("Isshownotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isshownotifications");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("usersettings_pkey");

                    b.HasIndex("Colorthemeid");

                    b.HasIndex("Userid");

                    b.ToTable("usersettings", (string)null);
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Goal", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "Admin")
                        .WithMany("GoalAdmins")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("goals_admin_id_fkey");

                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "Creator")
                        .WithMany("GoalCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("goals_creator_id_fkey");

                    b.Navigation("Admin");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.GroupChat", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.Goal", "Goal")
                        .WithMany("GroupChats")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("group_chat_goal_id_fkey");

                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "User")
                        .WithMany("GroupChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("group_chat_user_id_fkey");

                    b.Navigation("Goal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.GroupMember", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.Goal", "Goal")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("group_members_goal_id_fkey");

                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("group_members_user_id_fkey");

                    b.Navigation("Goal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.GroupTask", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "CreatedByNavigation")
                        .WithMany("GroupTasks")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("group_tasks_created_by_fkey");

                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.Goal", "Goal")
                        .WithMany("GroupTasks")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("group_tasks_goal_id_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.News", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "Admin")
                        .WithMany("News")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("news_admin_id_fkey");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.NewsImage", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.News", "News")
                        .WithMany("NewsImages")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("news_images_news_id_fkey");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.PersonalTask", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.Goal", "Goal")
                        .WithMany("PersonalTasks")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("personal_tasks_goal_id_fkey");

                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "User")
                        .WithMany("PersonalTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("personal_tasks_user_id_fkey");

                    b.Navigation("Goal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Point", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "User")
                        .WithOne("Point")
                        .HasForeignKey("Diploma_Ishchenko.DatabaseData.Models.Point", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("points_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.PointsHistory", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.GroupTask", "Task")
                        .WithMany("PointsHistories")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("points_history_task_id_fkey");

                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "User")
                        .WithMany("PointsHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("points_history_user_id_fkey");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Post", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.PersonalTask", "Task")
                        .WithMany("Posts")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("posts_task_id_fkey");

                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("posts_user_id_fkey");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.PostComment", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_post_comments_posts");

                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_post_comments_users");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.PostImage", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("post_images_post_id_fkey");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Scoretransaction", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "User")
                        .WithMany("Scoretransactions")
                        .HasForeignKey("Userid")
                        .IsRequired()
                        .HasConstraintName("scoretransactions_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Subscription", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "SubscribedTo")
                        .WithMany("SubscriptionSubscribedTos")
                        .HasForeignKey("SubscribedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("subscriptions_subscribed_to_id_fkey");

                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "Subscriber")
                        .WithMany("SubscriptionSubscribers")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("subscriptions_subscriber_id_fkey");

                    b.Navigation("SubscribedTo");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.SubscriptionHistory", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "User")
                        .WithMany("SubscriptionHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("subscription_history_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.TaskExecutionHistory", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "User")
                        .WithMany("TaskExecutionHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("task_execution_history_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.User", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Roleid")
                        .HasConstraintName("users_roleid_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.UserGiftCard", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.GiftCard", "GiftCard")
                        .WithMany("UserGiftCards")
                        .HasForeignKey("GiftCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("user_gift_cards_gift_card_id_fkey");

                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "User")
                        .WithMany("UserGiftCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("user_gift_cards_user_id_fkey");

                    b.Navigation("GiftCard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Usersetting", b =>
                {
                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.Colortheme", "Colortheme")
                        .WithMany("Usersettings")
                        .HasForeignKey("Colorthemeid")
                        .HasConstraintName("usersettings_colorthemeid_fkey");

                    b.HasOne("Diploma_Ishchenko.DatabaseData.Models.User", "User")
                        .WithMany("Usersettings")
                        .HasForeignKey("Userid")
                        .IsRequired()
                        .HasConstraintName("usersettings_userid_fkey");

                    b.Navigation("Colortheme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Colortheme", b =>
                {
                    b.Navigation("Usersettings");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.GiftCard", b =>
                {
                    b.Navigation("UserGiftCards");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Goal", b =>
                {
                    b.Navigation("GroupChats");

                    b.Navigation("GroupMembers");

                    b.Navigation("GroupTasks");

                    b.Navigation("PersonalTasks");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.GroupTask", b =>
                {
                    b.Navigation("PointsHistories");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.News", b =>
                {
                    b.Navigation("NewsImages");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.PersonalTask", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Post", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("PostImages");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Diploma_Ishchenko.DatabaseData.Models.User", b =>
                {
                    b.Navigation("GoalAdmins");

                    b.Navigation("GoalCreators");

                    b.Navigation("GroupChats");

                    b.Navigation("GroupMembers");

                    b.Navigation("GroupTasks");

                    b.Navigation("News");

                    b.Navigation("PersonalTasks");

                    b.Navigation("Point");

                    b.Navigation("PointsHistories");

                    b.Navigation("PostComments");

                    b.Navigation("Posts");

                    b.Navigation("Scoretransactions");

                    b.Navigation("SubscriptionHistories");

                    b.Navigation("SubscriptionSubscribedTos");

                    b.Navigation("SubscriptionSubscribers");

                    b.Navigation("TaskExecutionHistories");

                    b.Navigation("UserGiftCards");

                    b.Navigation("Usersettings");
                });
#pragma warning restore 612, 618
        }
    }
}
